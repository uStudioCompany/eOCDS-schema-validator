{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ajvForData","Ajv","allErrors","verbose","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSchemaRef","instance","jsonEditor","schemaJsonEditor","setDataRef","dataJsonEditor","validateInputs","schema","data","ajv","validate","compile","setState","errors","console","log","e","handleChangeSchema","val","inputSchema","state","inputData","handleChangeData","saveDataToLocalStorage","handleChangePreset","currentTarget","value","preset","budgetSchema","set","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","localStorage","setItem","JSON","stringify","stop","_this2","getItem","parse","_this3","_this$state","showStatus","react_default","createElement","className","onChange","onClick","length","es","ref","mode","ace","theme","map","error","i","key","keyword","schemaPath","dataPath","message","entries","params","param","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.803f49aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport Ajv from \"ajv\";\n\nimport { JsonEditor as Editor } from \"jsoneditor-react\";\nimport ace from \"brace\";\nimport \"brace/mode/json\";\nimport \"brace/theme/chrome\";\n\nimport budgetSchema from \"./schemas/budget.json\";\n\nimport \"jsoneditor-react/es/editor.min.css\";\nimport \"./App.css\";\n\nconst ajvForData = new Ajv({ allErrors: true, verbose: true });\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      preset: \"\",\n      inputSchema: {},\n      inputData: {},\n      errors: [],\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"data\")) {\n      const data = JSON.parse(localStorage.getItem(\"data\"));\n      this.setState({ inputData: data }, () => {\n        this.dataJsonEditor.set(data);\n      });\n    }\n  }\n\n  setSchemaRef = (instance) => {\n    if (instance) {\n      const { jsonEditor } = instance;\n      this.schemaJsonEditor = jsonEditor;\n    } else {\n      this.schemaJsonEditor = null;\n    }\n  };\n\n  setDataRef = (instance) => {\n    if (instance) {\n      const { jsonEditor } = instance;\n      this.dataJsonEditor = jsonEditor;\n    } else {\n      this.dataJsonEditor = null;\n    }\n  };\n\n  validateInputs = (schema, data) => {\n    const ajv = new Ajv();\n    try {\n      const validate = ajv.compile(schema);\n      const valid = validate(data);\n\n      if (!valid) {\n        this.setState({ errors: validate.errors });\n        console.log(validate.errors);\n      } else {\n        this.setState({ errors: [] });\n      }\n    } catch (e) {}\n  };\n\n  handleChangeSchema = (val) => {\n    console.log(val);\n    this.setState({ inputSchema: val }, () => {\n      this.validateInputs(this.state.inputSchema, this.state.inputData);\n    });\n  };\n\n  handleChangeData = (val) => {\n    console.log(val);\n    this.setState({ inputData: val }, () => {\n      this.validateInputs(this.state.inputSchema, this.state.inputData);\n      this.saveDataToLocalStorage();\n    });\n  };\n\n  handleChangePreset = (e) => {\n    switch (e.currentTarget.value) {\n      case \"budget\":\n        this.setState(\n          {\n            preset: e.currentTarget.value,\n            inputSchema: budgetSchema,\n            errors: [],\n          },\n          () => {\n            this.schemaJsonEditor.set(this.state.inputSchema);\n            this.validateInputs(this.state.inputSchema, this.state.inputData);\n          }\n        );\n        break;\n      default:\n        this.setState(\n          {\n            preset: \"\",\n            inputSchema: {},\n            errors: [],\n          },\n          () => {\n            this.schemaJsonEditor.set(this.state.inputSchema);\n            this.validateInputs(this.state.inputSchema, this.state.inputData);\n          }\n        );\n    }\n  };\n\n  saveDataToLocalStorage = async () => {\n    localStorage.setItem(\"data\", JSON.stringify(this.state.inputData));\n  };\n\n  render() {\n    const { preset, inputSchema, inputData, errors } = this.state;\n    const showStatus = !!inputSchema && !!inputData;\n\n    return (\n      <div className=\"App\">\n        <div className=\"presets\">\n          <h3>Presets schemas</h3>\n          <select className=\"preset-select\" value={preset} onChange={this.handleChangePreset}>\n            <option value=\"\">-</option>\n            <option value=\"budget\">Budget</option>\n          </select>\n          <button className=\"validate-button\" onClick={() => this.validateInputs(inputSchema, inputData)}>\n            Validate\n          </button>\n          {showStatus && (\n            <span\n              className={\n                !!errors.length ? \"validate-status validate-status_invalid\" : \"validate-status validate-status_valid\"\n              }>\n              {!!errors.length ? \"Data is not valid\" : \"Data is valid\"}\n            </span>\n          )}\n        </div>\n        <div className=\"editors\">\n          <div className=\"schema-editor\">\n            <h2>Schema</h2>\n            <Editor\n              ref={this.setSchemaRef}\n              value={inputSchema}\n              mode=\"code\"\n              onChange={this.handleChangeSchema}\n              ace={ace}\n              theme=\"ace/theme/chrome\"\n            />\n          </div>\n          <div className=\"data-editor\">\n            <h2>Data</h2>\n            <Editor\n              ref={this.setDataRef}\n              value={inputData}\n              mode=\"code\"\n              onChange={this.handleChangeData}\n              ace={ace}\n              theme=\"ace/theme/chrome\"\n              ajv={ajvForData}\n              schema={inputSchema}\n            />\n          </div>\n        </div>\n        {!!errors.length && <h3>Errors</h3>}\n        <div className=\"errors\">\n          {errors.map((error, i) => (\n            <div className=\"error\" key={i}>\n              <h4>№ {i + 1}</h4>\n              <p>\n                Keyword of error: <b>{error.keyword}</b>\n              </p>\n              <p>\n                Schema path: <b>{error.schemaPath}</b>\n              </p>\n              <p>\n                Data path: <b>{error.dataPath || \"-\"}</b>\n              </p>\n              <p>\n                Message: <b>{error.message}</b>\n              </p>\n              {\"params\" in error && <p>Details:</p>}\n              {\"params\" in error && (\n                <ul>\n                  {Object.entries(error.params).map((param) => (\n                    <li key={param[0]}>\n                      {param[0]} : <b>{param[1] || \"-\"}</b>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"normalize.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}