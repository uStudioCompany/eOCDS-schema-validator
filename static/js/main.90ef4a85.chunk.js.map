{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["ajvForData","Ajv","allErrors","verbose","validateSchema","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSchemaRef","instance","jsonEditor","schemaJsonEditor","setDataRef","dataJsonEditor","validateInputs","schema","data","ajv","validate","compile","setState","errors","console","log","e","handleChangeSchema","val","ajvForSchema","inputSchema","schemaIsValid","errorSchemaMessage","state","inputData","handleChangeData","saveDataToLocalStorage","handleChangePreset","preset","currentTarget","value","presetSchemas","set","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","localStorage","setItem","JSON","stringify","stop","createEISchema","_this2","getItem","parse","_this3","_this$state","showStatus","react_default","createElement","className","onChange","keys","map","key","disabled","onClick","length","es","ref","mode","allowedModes","ace","theme","error","i","keyword","schemaPath","dataPath","message","entries","params","param","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.90ef4a85.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport Ajv from \"ajv\";\n\nimport { JsonEditor as Editor } from \"jsoneditor-react\";\nimport ace from \"brace\";\nimport \"brace/mode/json\";\nimport \"brace/theme/chrome\";\n\nimport budgetSchema from \"./schemas/budget.json\";\nimport createEISchema from \"./schemas/create-ei.json\";\n\nimport \"jsoneditor-react/es/editor.min.css\";\nimport \"./App.css\";\n\nconst ajvForData = new Ajv({ allErrors: true, verbose: true, validateSchema: false });\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      preset: \"\",\n      inputSchema: {},\n      inputData: {},\n      errors: [],\n      schemaIsValid: true,\n      errorSchemaMessage: [],\n      presetSchemas: {\n        //budgetSchema,\n        createEISchema\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"data\")) {\n      const data = JSON.parse(localStorage.getItem(\"data\"));\n      this.setState({ inputData: data }, () => {\n        this.dataJsonEditor.set(data);\n      });\n    }\n  }\n\n  setSchemaRef = (instance) => {\n    if (instance) {\n      const { jsonEditor } = instance;\n      this.schemaJsonEditor = jsonEditor;\n    } else {\n      this.schemaJsonEditor = null;\n    }\n  };\n\n  setDataRef = (instance) => {\n    if (instance) {\n      const { jsonEditor } = instance;\n      this.dataJsonEditor = jsonEditor;\n    } else {\n      this.dataJsonEditor = null;\n    }\n  };\n\n  validateInputs = (schema, data) => {\n    const ajv = new Ajv();\n    try {\n      const validate = ajv.compile(schema);\n      const valid = validate(data);\n\n      if (!valid) {\n        this.setState({ errors: validate.errors });\n        console.log(validate.errors);\n      } else {\n        this.setState({ errors: [] });\n      }\n    } catch (e) { }\n  };\n\n  handleChangeSchema = (val) => {\n    const ajvForSchema = new Ajv();\n\n    if (ajvForSchema.validateSchema(val)) {\n      this.setState(\n        {\n          inputSchema: val,\n          schemaIsValid: true,\n          errorSchemaMessage: [],\n        },\n        () => {\n          this.validateInputs(this.state.inputSchema, this.state.inputData);\n        }\n      );\n    } else {\n      this.setState({ errors: [], schemaIsValid: false, errorSchemaMessage: ajvForSchema.errors });\n    }\n  };\n\n  handleChangeData = (val) => {\n    this.setState({ inputData: val }, () => {\n      this.validateInputs(this.state.inputSchema, this.state.inputData);\n      this.saveDataToLocalStorage();\n    });\n  };\n\n  handleChangePreset = (e) => {\n    this.setState(\n      {\n        preset: e.currentTarget.value,\n        inputSchema: this.state.presetSchemas[e.currentTarget.value] || {},\n        errors: [],\n        schemaIsValid: true,\n        errorSchemaMessage: [],\n      },\n      () => {\n        this.schemaJsonEditor.set(this.state.inputSchema);\n        this.validateInputs(this.state.inputSchema, this.state.inputData);\n      }\n    );\n  };\n\n  saveDataToLocalStorage = async () => {\n    localStorage.setItem(\"data\", JSON.stringify(this.state.inputData));\n  };\n\n  render() {\n    const { preset, inputSchema, inputData, presetSchemas, errors, schemaIsValid, errorSchemaMessage } = this.state;\n    const showStatus = !!inputSchema && !!inputData;\n\n    return (\n      <div className=\"App\">\n        <div className=\"presets\">\n          <h3>Presets schemas</h3>\n          <select className=\"preset-select\" value={preset} onChange={this.handleChangePreset}>\n            <option value=\"\">-</option>\n            {Object.keys(presetSchemas).map(schema => (<option key={schema} value={schema}>{schema}</option>))}\n          </select>\n          <button\n            className=\"validate-button\"\n            disabled={!schemaIsValid}\n            onClick={() => this.validateInputs(inputSchema, inputData)}>\n            Validate\n          </button>\n          {showStatus && schemaIsValid && (\n            <span\n              className={\n                !!errors.length ? \"validate-status validate-status_invalid\" : \"validate-status validate-status_valid\"\n              }>\n              {!!errors.length ? \"Data is not valid\" : \"Data is valid\"}\n            </span>\n          )}\n          {!schemaIsValid && <span className=\"validate-status validate-status_invalid\">Error parsing schema</span>}\n        </div>\n        <div className=\"editors\">\n          <div className=\"schema-editor\">\n            <h2>Schema</h2>\n            <Editor\n              ref={this.setSchemaRef}\n              value={inputSchema}\n              mode=\"view\"\n              allowedModes={[\"view\", \"code\"]}\n              onChange={this.handleChangeSchema}\n              ace={ace}\n              theme=\"ace/theme/chrome\"\n            />\n          </div>\n          <div className=\"data-editor\">\n            <h2>Data</h2>\n            <Editor\n              ref={this.setDataRef}\n              value={inputData}\n              mode=\"code\"\n              onChange={this.handleChangeData}\n              ace={ace}\n              theme=\"ace/theme/chrome\"\n              ajv={ajvForData}\n              schema={inputSchema}\n            />\n          </div>\n        </div>\n        {(!!errors.length || !!errorSchemaMessage.length) && <h3>Errors</h3>}\n        <div className=\"errors\">\n          {errors.map((error, i) => (\n            <div className=\"error\" key={i}>\n              <h4>№ {i + 1}</h4>\n              <p>\n                Keyword of error: <b>{error.keyword}</b>\n              </p>\n              <p>\n                Schema path: <b>{error.schemaPath}</b>\n              </p>\n              <p>\n                Data path: <b>{error.dataPath || \"-\"}</b>\n              </p>\n              <p>\n                Message: <b>{error.message}</b>\n              </p>\n              {\"params\" in error && <p>Details:</p>}\n              {\"params\" in error && (\n                <ul>\n                  {Object.entries(error.params).map((param) => (\n                    <li key={param[0]}>\n                      {param[0]} : <b>{param[1] || \"-\"}</b>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"errors\">\n          {errorSchemaMessage.map((error, i) => (\n            <div className=\"error\" key={i}>\n              <h4>№ {i + 1}</h4>\n              <p>\n                Keyword of error: <b>{error.keyword}</b>\n              </p>\n              <p>\n                Schema path: <b>{error.schemaPath}</b>\n              </p>\n              <p>\n                Data path: <b>{error.dataPath || \"-\"}</b>\n              </p>\n              <p>\n                Message: <b>{error.message}</b>\n              </p>\n              {\"params\" in error && <p>Details:</p>}\n              {\"params\" in error && (\n                <ul>\n                  {Object.entries(error.params).map((param) => (\n                    <li key={param[0]}>\n                      {param[0]} : <b>{param[1] || \"-\"}</b>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"normalize.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}